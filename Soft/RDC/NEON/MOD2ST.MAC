; конвертер файлов *.mod => *.stm
; (C) 1994 Russian Digital Computing, 2:5020/301.7@fidonet

	.MCALL	.CSISPC,.WRITW,.READW,.DSTAT,.LOOKUP,.WAIT
	.MCALL	.ENTER,.EXIT,.close,.PURGE,.SETTOP,.READ

	IBL	= 4
	IBS	= IBL*1000

	inbuff	= inbuf  + IBS
	outbuf	= inbuff + IBS

	.MACRO	.PRINT	ARG	;только для ПК-11/16
	MOV	ARG,@#177566
	NOP
	.ENDM

BEG:	.PRINT	#ZAST
START:	MOV	#100,@#177560
	.CSISPC	#OUTSP,#DEVNAM
	CLR	@#177560
	MOV	#760,SP
	TST	INSPEC
	BNE	10$
	.PRINT	#MSG1
	BR	START
10$:	TST	INSPEC+2
	BNE	20$
	.PRINT	#MMSG2
	BR	START
20$:	MOV	#INSPEC,R0
	MOV	#OUTSP,R1
	TST	(R1)
	BNE	30$
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	(R0)+,(R1)+
	MOV	#^RSTM,(R1)+
30$:	TST	INSPEC+10
	BEQ	40$
	MOV	INSPEC+10,OUTSP
40$:	.DSTAT	#STAT,#INSPEC	
	BCS	50$
	TST	STAT
	BMI	60$
50$:	.PRINT	#MMSG3
	BR	START
60$:	TST	STAT+4
	BEQ	70$
	.DSTAT	#STAT,#OUTSP
	BCS	50$
	TST	STAT+4
	BNE	80$
70$:	.PRINT	#MMSG1
	BR	START
80$:	.LOOKUP	#AREA,#3,#INSPEC
	BCC	90$
	.PRINT	#MMSG4
	BR	START
90$:	MOV	R0,BLEN
	.ENTER	#AREA,#0,#OUTSP,#-1
	BCC	110$
	DECB	@#52
	BEQ	100$
	.PRINT	#MMSG5
	BR	START
100$:	.PRINT	#MMSG6
	BR	START

110$:	MOV	#OUTBUF,MEMEND
	MOV	@#54,R0
	MOV	266(R0),R0
	TST	-(R0)
	.SETTOP	R0
	SUB	#OUTBUF,R0
	CLRB	R0
	SWAB	R0
	ASR	R0
	MOV	R0,OBL
	SWAB	R0
	MOV	R0,OWD
	ASL	R0
	MOV	R0,OBS
	ADD	R0,MEMEND

	MOV	BLEN,R5
	CLR	R4
	DIV	#IBL,R4
	TST	R5
	BEQ	120$
	INC	R4
120$:	MOV	#60000,R1
	CLR	R0
	DIV	R4,R0
	MOV	R0,INCREM
	MOV	R1,LENGTH
	MOV	#TRIB,R0
	mov	R0,oldr
	mov	#60,R1
	movb	#'▒,(R0)+
	sob	R1,.-4
	movb	#200,(R0)+
	.print	#CUR
	movb	#200,trib
	.print	#lrib
	CALL	RIBB

	CLR	QQ
	CLR	BLOUT
	MOV	#IBL*2,BLIN
	.readw	#area,#3,#inbuf,#IBS/2,#0
	BCC	130$
	JMP	READER

130$:	.READ	#AREA,#3,#INBUFF,#IBS/2,#IBL
	CALL	INCRIB
	CMP	INBUF,#"PA
	BNE	140$
	CMP	INBUF+2,#"CK
	BNE	140$
	.PRINT	#MSG4
	JMP	START

140$:	CMP	INBUF+2070,#"M.
	BNE	150$
	CMP	INBUF+2072,#"K.
	BEQ	160$
150$:	.PRINT	#MSG3
	JMP	START

160$:	MOV	#200,R5		;Max Song Length
	CLR	R4
	BISB	INBUF+1666,R4	;Real Song Length
	MOV	#INBUF+1670,R1
	MOV	#OUTBUF+2020,R2
	CLR	R3
170$:	MOVB	(R1)+,R0
	MOVB	R0,(R2)+
	CMP	R0,R3
	BLO	.+4
	MOV	R0,R3
	DEC	R5
	SOB	R4,170$
	TST	R5
	BMI	150$
	BEQ	190$
180$:	MOVB	#143,(R2)+
	SOB	R5,180$
190$:	INC	R3
	MOVB	R3,-(SP)
	SWAB	R3
	MOV	R3,CC
	ASR	R3
	ASR	R3
	ADD	#111,R3

	MOV	#INBUF,R1
	MOV	#OUTBUF,R2
	MOV	#10.,R5
200$:	MOV	(R1)+,(R2)+
	SOB	R5,200$
	MOV	#"!S,(R2)+
	MOV	#"cr,(R2)+
	MOV	#"ea,(R2)+
	MOV	#"m!,(R2)+
	MOV	#1032,(R2)+
	MOV	#12402,(R2)+
	MOVB	#140,(R2)+
	MOVB	(SP)+,(R2)+
	MOVB	#100,(R2)+
	MOV	#13.,R5
	MOVB	#'X,(R2)+
	SOB	R5,.-4

	MOV	#INSTAB,R4
	MOV	#31.,R5		;31. samples loop
210$:	MOV	#7,R0
	MOV	(R1)+,(R2)+	;First 14. letters of samplename
	SOB	R0,.-2
	MOV	(R1)+,14(R2)
	MOV	(R1)+,16(R2)
	MOV	(R1)+,20(R2)
	TST	(R1)+
	MOV	R3,(R2)+	;Address in STM file
	MOV	(R1)+,R0
	SWAB	R0
	CLC
	ROL	R0
	BCC	220$
	.PRINT	#MSG5
	JMP	START
220$:	MOV	R0,(R2)+	;Length in bytes
	MOV	R0,(R4)+
	BEQ	230$	
	DEC	R0
	CLC
	ROR	R0
	ASH	#-3,R0
	INC	R0
	ADD	R0,R3
230$:	MOV	(R1)+,R0
	CLRB	R0
	SWAB	R0
	MOV	R0,-(SP)	;push Volume
	MOV	(R1)+,R0
	SWAB	R0
	ASL	R0
	MOV	R0,(R2)+	;Repeat Point
	MOV	(R1)+,-(SP)
	SWAB	(SP)
	ASL	(SP)
	ADD	(SP)+,R0
	beq	240$
	CMP	#10,R0
	Blo	250$
240$:	MOV	#177777,R0
	clr	-2(R2)
250$:	MOV	R0,(R2)+	;Repeat End
	MOV	(SP)+,(R2)+	;Volume
	MOV	#20400,(R2)+	;DigiSpeed
	ADD	#6,R2
	SOB	R5,210$

	MOV	#INBUF+2070,R1
	MOV	#OUTBUF+2220,R2
NC:	CMP	(R1)+,(R1)+
	CALL	READ
NCC:	CLR	R3
	BISB	(R1),R3
	MOV	R3,R4
	MOVB	2(R1),R5
	BIC	#17,R5
	ASH	#-4,R4
	ASR	R4
	RORB	R5
	MOVB	R5,1(R2)	;Sample Number
	BIC	#177760,R3
	SWAB	R3
	BISB	1(R1),R3	;Note Period
	BNE	10$
	MOVB	#377,(R2)
	BR	50$
10$:	MOV	#TAB,R5
	MOV	#20,R4	;BEGINNER OCTAVE
20$:	CLR	R0	;BEGINNER NOTE
30$:	CMP	(R5)+,R3
	BLOS	40$
	INC	R0
	CMP	#14,R0
	BNE	30$
	ADD	#20,R4
	BR	20$
40$:	BIS	R4,R0
	MOVB	R0,(R2)
50$:	BISB	#1,1(R2)
	MOVB	2(R1),R0
	BIC	#177760,R0
	ASL	R0
	ASL	R0
	ADD	#EFFTAB,R0
	MOV	(R0)+,2(R2)
	CALL	@(R0)+	;Special Effects Translation

	CMP	(R2)+,(R2)+
	CALL	WRITE
KC:	DEC	(PC)+
CC:	HALT
	BNE	NC

	MOV	#31.,R5		;31. samples loop
	MOV	#INSTAB,R4
NCC1:	MOV	(R4),R3
	BEQ	ECC2
10$:	MOVB	(R1)+,(R2)+	;sample translation
	CALL	READ
	CALL	WRITE
	SOB	R3,10$
	MOV	(R4),R3
	MOV	R3,R0
	DEC	R3
	CLC
	ROR	R3
	ASH	#-3,R3
	INC	R3
	ASH	#4,R3
	SUB	R0,R3
	BEQ	ECC2
20$:	CLRB	(R2)+	;add zero bytes for even
	CALL	WRITE
	SOB	R3,20$
ECC2:	TST	(R4)+
	SOB	R5,NCC1

	SUB	#OUTBUF,R2	;close out channel
	BEQ	10$
	INC	R2
	ASR	R2
	.WRITW	#AREA,#0,#OUTBUF,R2,BLOUT
	BCC	10$
	JMP	WRITER
10$:	.PRINT	#CURR
	.CLOSE	#0
	JMP	START

READ:	TST	QQ
	BNE	10$
	MOV	#INBUF,AB
	CMP	#INBUFF,R1
	BR	20$
10$:	MOV	#INBUFF,AB
	CMP	#OUTBUF,R1
20$:	BHI	RN
	COM	QQ
	.WAIT	#3
	BCS	READER

	MOV	BLEN,-(SP)
	SUB	BLIN,(SP)
	BLE	40$
	CMP	#IBL,(SP)
	BHIS	30$
	MOV	#IBL,(SP)
30$:	SWAB	(SP)
	.READ	#AREA,#3,AB,(SP),BLIN
	BCS	READER
40$:	TST	(SP)+
	ADD	#IBL,BLIN
	TST	QQ
	BNE	INCRIB
	MOV	#INBUF,R1

INCRIB: ADD	INCREM,LENGTH
	CMP	#60000,LENGTH
	BHIS	RIBB
	MOV	#60000,LENGTH
ribb:	MOV	R3,-(SP)
	MOV	#TRIB,R0
	MOV	#60,R3
10$:	MOVB	#'▒,(R0)+
	SOB	R3,10$
	MOV	#TRIB,R0
	MOV	LENGTH,R3
	CLC
	ROR	R3
	ASH	#-10,R3
	BEQ	30$
20$:	MOVB	#'█,(R0)+
	SOB	R3,20$
30$:	movb	#200,(R0)
	.print	oldr
	mov	R0,oldr
	MOV	(SP)+,R3
RN:	RETURN

WRITE:	CMP	MEMEND,R2
	BHI	10$
	.WAIT	#3
	BCS	READER
	.WRITW	#AREA,#0,#OUTBUF,OWD,BLOUT
	BCS	WRITER
	ADD	OBL,BLOUT
	SUB	OBS,R2
10$:	RETURN

READER:	.print	#msg2
	BR	ST

WRITER:	TSTB	@#52
	BEQ	10$
	.PRINT	#MSG6
	BR	ST
10$:	.PRINT	#MSG7
ST:	JMP	START

ARP:	MOVB	3(R1),R0
	BNE	RET
	br	zap

TEMP:	MOVB	3(R1),R0
	cmp	#17,R0
	blo	ZAP
	ASH	#4,R0
	MOVB	R0,3(R2)
	RETURN

OFFSET:	TSTB	3(R1)
	BNE	SET
zap:	MOV	#200,2(R2)
	RETURN

VOLUM:	MOVB	3(R1),R0
	CMP	#100,R0
	BHI	1$
	MOV	#77,R0
1$:	MOV	R0,-(SP)
	BIC	#177770,R0
	BICB	#7,1(R2)
	BISB	R0,1(R2)
	MOV	(SP)+,R0
	BIC	#177707,R0
	ASL	R0
	MOV	R0,2(R2)
	RETURN

SET:	MOVB	3(R1),3(R2)
RET:	RETURN

EFFTAB:	.WORD	212,	ARP	; 0 - None/Arpeggio
	.WORD	206,	SET	; 1 - Portamento Up
	.WORD	205,	SET	; 2 - Portamento Down
	.WORD	207,	SET	; 3 - TonePortamento
	.WORD	210,	SET	; 4 - Vibrato
	.WORD	204,	SET	; 5 - TonePortamento + VolumeSlide
	.WORD	204,	SET	; 6 - Vibrato + VolumeSlide
	.WORD	211,	SET	; 7 - Tremolo
	.WORD	200,	RET	; 8 - * NOT USED *
	.WORD	232,	OFFSET	; 9 - SampleOffset
	.WORD	204,	SET	; A - VolumeSlide
	.WORD	202,	SET	; B - PositionJump
	.WORD	200,	VOLUM	; C - Set Volume
	.WORD	203,	RET	; D - PatternBreak
	.WORD	230,	SET	; E - Misc. Cmds
	.WORD	201,	TEMP	; F - Set Speed

INSTAB:	.BLKW	31.

TAB:	.WORD	856.,808.,762.,720.,678.,640.,604.,570.,538.,508.,480.,453.
	.WORD	428.,404.,381.,360.,339.,320.,302.,285.,269.,254.,240.,226.
	.WORD	214.,202.,190.,180.,170.,160.,151.,143.,135.,127.,120.,113.
	.WORD	107.,101.,095.,090.,085.,080.,075.,071.,067.,063.,060.,056.
	.WORD	053.,050.,047.,045.,042.,040.,037.,035.,033.,031.,030.,028.
	.WORD	0

AB:	HALT	;Адрес читаемого буфера
QQ:	HALT	;флаг входного буфера
OBL:	HALT	;длина выходного буфера в блоках
OBS:	HALT	;--//-- в байтах
OWD:	HALT	;--//-- в словах
MEMEND:	HALT	;конец занимаемой памяти
SSTERM:	HALT	;слово состояния терминала
LENGTH:	HALT	;текущая длина полоски
INCREM:	HALT	;приращение текущей длины
OLDR:	HALT	;адрес выводимой части полоски
BLIN:	HALT	;номер блока во входном файле
BLOUT:	HALT	;--//-- в выходном
OUTSP:	.BLKW	5*3
INSPEC:	.BLKW	4*6
STAT:	.BLKW	4
BLEN:	HALT
area:	.blkw	6
DEVNAM:	.RAD50	/MODSTM/
	.BLKW	2

CURR:	.ASCII	/  O.K./<15><12><33>/W/<200>
CUR:	.ASCII	<33>/W/
LRIB:	.ASCII	<15>/Конвертируем:  /
TRIB:	.BLKB	100

ZAST:	.ASCII	<33>/</<33>/[?7l/<33>/W/
	.ASCII	/╔═════════════════════════════╦════════════╗/<15><12>
	.ASCII	/║ Protracker module convertor ║ v1.17 beta ║/<15><12>
	.ASCIZ	/╚═════════════════════════════╩════════════╝/<33>/W/
MSG1:	.ASCII	<33>/</<33>/[?7l/<33>/W/
	.ASCII	/╔═══════════════════════════════════════════════════════╗/<15><12>
	.ascii	/║ Конвертор файлов *.MOD ─Ў *.STM для программы DMP.SAV ║/<15><12>
	.ASCII	/╠═══════════════════════════════════════════════════════╣/<15><12>
	.ASCII	/║ Преобразует мелодии, созданные на AMIGA 600 (1200), в ║/<15><12>
	.ASCII	/║ формат музыкального редактора SCREAM TRACKER 2.2, по- ║/<15><12>
	.ASCII	/║ сле чего их может проигрывать программа DMP.  Конвер- ║/<15><12>
	.ASCII	/║ тор воспринимает только не упакованные мелодии MOD!!! ║/<15><12>
	.ASCII	/║ Правильное преобразование мелодии не гарантируется... ║/<15><12>
	.ASCII	/╟───────────────────────────────────────────────────────╢/<15><12>
	.ASCII	/║ Формат команд: {dev:}[file{.stm}=]{dev:}file{.mod}, а ║/<15><12>
	.ASCII	/║ если тот же файл на устройство: {dev:}file{.mod},dev: ║/<15><12>
	.ASCII	/╠═══════════════════════════════════════════════════════╣/<15><12>
	.ASCII	/║ v1.17 beta (C) 28-May-94 by Russian Digital Computing ║/<15><12>
	.ASCIZ	/╚═══════════════════════════════════════════════════════╝/<33>/W/
msg2:	.asciz	<15><12>/?MOD2ST-F-Ошибка чтения исходного файла/<33>/W/
msg3:	.asciz	<15><12>/?MOD2ST-F-Файл не в формате Amiga ProTracker/<33>/W/
MSG4:	.ASCIZ	<15><12>/?MOD2ST-F-Извините, но эта мелодия упакована.../<33>/W/
msg5:	.asciz	<15><12>/?MOD2ST-F-Не могу преобразовать файл, Sample Length > 64kb/<33>/W/
MSG6:	.asciz	<15><12>/?MOD2ST-F-Ошибка записи в конвертированный файл/<33>/W/
MSG7:	.ASCIZ	<15><12>/?MOD2ST-F-Нет места на диске для конвертированного файла/<33>/W/
MMSG1:	.ASCIZ	/?MOD2ST-F-Драйвер устройства не загружен/
MMSG2:	.ASCIZ	/?MOD2ST-F-Имя файла не указано/
MMSG3:	.ASCIZ	/?MOD2ST-F-Недопустимое устройство/
MMSG4:	.ASCIZ	/?MOD2ST-F-Файл не найден/
MMSG5:	.ASCIZ	/?MOD2ST-F-Защищённый файл уже существует/
MMSG6:	.ASCIZ	/?MOD2ST-F-Каталог выходного устройства переполнен/
	.even

inbuf:	.END	BEG
                                                                                                                                                                                                                                                                                       